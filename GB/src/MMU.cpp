#include "MMU.h"
#include "JOYP.h"
#include "SOUND.h"
#include "Timer.h"
#include <iostream>

gb::MMU::MMU(JOYP *joyp, Timer *timer, SOUND *sound) {
  m_bios = new unsigned int[256] {
    0x31, 0xFE, 0xFF, 0xAF, 0x21, 0xFF, 0x9F, 0x32, 0xCB, 0x7C, 0x20, 0xFB, 0x21, 0x26, 0xFF, 0x0E,
    0x11, 0x3E, 0x80, 0x32, 0xE2, 0x0C, 0x3E, 0xF3, 0xE2, 0x32, 0x3E, 0x77, 0x77, 0x3E, 0xFC, 0xE0,
    0x47, 0x11, 0x04, 0x01, 0x21, 0x10, 0x80, 0x1A, 0xCD, 0x95, 0x00, 0xCD, 0x96, 0x00, 0x13, 0x7B,
    0xFE, 0x34, 0x20, 0xF3, 0x11, 0xD8, 0x00, 0x06, 0x08, 0x1A, 0x13, 0x22, 0x23, 0x05, 0x20, 0xF9,
    0x3E, 0x19, 0xEA, 0x10, 0x99, 0x21, 0x2F, 0x99, 0x0E, 0x0C, 0x3D, 0x28, 0x08, 0x32, 0x0D, 0x20,
    0xF9, 0x2E, 0x0F, 0x18, 0xF3, 0x67, 0x3E, 0x64, 0x57, 0xE0, 0x42, 0x3E, 0x91, 0xE0, 0x40, 0x04,
    0x1E, 0x02, 0x0E, 0x0C, 0xF0, 0x44, 0xFE, 0x90, 0x20, 0xFA, 0x0D, 0x20, 0xF7, 0x1D, 0x20, 0xF2,
    0x0E, 0x13, 0x24, 0x7C, 0x1E, 0x83, 0xFE, 0x62, 0x28, 0x06, 0x1E, 0xC1, 0xFE, 0x64, 0x20, 0x06,
    0x7B, 0xE2, 0x0C, 0x3E, 0x87, 0xE2, 0xF0, 0x42, 0x90, 0xE0, 0x42, 0x15, 0x20, 0xD2, 0x05, 0x20,
    0x4F, 0x16, 0x20, 0x18, 0xCB, 0x4F, 0x06, 0x04, 0xC5, 0xCB, 0x11, 0x17, 0xC1, 0xCB, 0x11, 0x17,
    0x05, 0x20, 0xF5, 0x22, 0x23, 0x22, 0x23, 0xC9, 0xCE, 0xED, 0x66, 0x66, 0xCC, 0x0D, 0x00, 0x0B,
    0x03, 0x73, 0x00, 0x83, 0x00, 0x0C, 0x00, 0x0D, 0x00, 0x08, 0x11, 0x1F, 0x88, 0x89, 0x00, 0x0E,
    0xDC, 0xCC, 0x6E, 0xE6, 0xDD, 0xDD, 0xD9, 0x99, 0xBB, 0xBB, 0x67, 0x63, 0x6E, 0x0E, 0xEC, 0xCC,
    0xDD, 0xDC, 0x99, 0x9F, 0xBB, 0xB9, 0x33, 0x3E, 0x3c, 0x42, 0xB9, 0xA5, 0xB9, 0xA5, 0x42, 0x3C,
    0x21, 0x04, 0x01, 0x11, 0xA8, 0x00, 0x1A, 0x13, 0xBE, 0x20, 0xFE, 0x23, 0x7D, 0xFE, 0x34, 0x20,
    0xF5, 0x06, 0x19, 0x78, 0x86, 0x23, 0x05, 0x20, 0xFB, 0x86, 0x20, 0xFE, 0x3E, 0x01, 0xE0, 0x50
  };

  m_JOYP = joyp;
  m_timer = timer;
  m_SOUND = sound;
  m_ram = new unsigned char[65535];
  m_inBios = true;
}

void gb::MMU::cleanup() {
  delete[] m_ram;
  m_ram = nullptr;
}

void gb::MMU::reset() {
  for (int i = 0; i <= 65535; i++) {
    m_ram[i] = 0;
  }
  setInBios(true);
}

void gb::MMU::setRom(unsigned char* bytes, unsigned int length) {
  //rom area is 32k, don't allow ability to write past that
  if (length > 8192 * 4) {
    length = 8192 * 4;
  }
  for (unsigned int i = 0; i < length; i++) {
    m_ram[i] = bytes[i];
  }
}

unsigned char gb::MMU::readByte(unsigned int addr) {
  if (addr == 0xFF00) {
    return m_JOYP->readByte(addr);
  }

  //Timers
  if (addr == 0xFF04) {
    return m_timer->getDiv();
  }
  if (addr == 0xFF05) {
    return m_timer->getCounter();
  }
  if (addr == 0xFF06) {
    return m_timer->getModulo();
  }
  if (addr == 0xFF07) {
    return 0;
  }

  if (addr >= 0xFF10 && addr <= 0xFF3F) {
    return m_SOUND->readByte(addr);
  }

  if (m_inBios) {
    if (addr < 0x0100) {
      return m_bios[addr];
    }
  }
  return m_ram[addr];
}

unsigned int gb::MMU::readWord(unsigned int addr) {
  return readByte(addr) + (readByte(addr + 1) << 8);
}

void gb::MMU::writeByte(unsigned int addr, unsigned char byte) {
  if (addr >= 0x0000 && addr <= 0x7FFF) {
    // ROM bank switching and ram bank switching not implemented
    return;
  }
  
  if (addr == 0xFF00) {
    //mask to make sure only column control bit is set
    return m_JOYP->writeByte(addr, byte & 0x30);
  }

  //Timers
  if (addr == 0xFF04) {
    m_timer->setDiv();
  }
  if (addr == 0xFF05) {
    return;
  }
  if (addr == 0xFF06) {
    m_timer->setModulo(byte);
    return;
  }
  if (addr == 0xFF07) {
    m_timer->configure(byte);
    return;
  }

  if (addr >= 0xFF10 && addr <= 0xFF3F) {
    return m_SOUND->writeByte(addr, byte);
  }

  if (addr == 0xFF46) {
    //DMA transfer request.
    int v;
    for (int i = 0; i < 160; i++)
    {
      v = m_ram[(byte << 8) + i];
      m_ram[0xFE00 + i] = v;
    }
    return;
  }

  //BIOS
  if (m_inBios) {
    if (addr < 0x0100) {
      m_bios[addr] = byte;
      return;
    }
  }

  m_ram[addr] = byte;
}

void gb::MMU::writeWord(unsigned int addr, unsigned int byte) {
  char first = byte & 0xFF;
  char second = byte >> 8;
  writeByte(addr, first);
  writeByte(addr + 1, second);
}

void gb::MMU::setInBios(bool inBios) {
  m_inBios = inBios;
}

bool gb::MMU::inBios() {
  return m_inBios;
}